\documentclass{article}
\usepackage{noweb}
\usepackage{amsmath}
\title{Solving Poisson's Equation Numerically}
\author{184077001@iitb.ac.in}
\begin{document}
\maketitle

<<includes>>=
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int debug = 1;

<<prototype>>

@
Given a charge distribution, $\rho$, the task at hand is to solve
Poisson's equation to find the electric potential, $\phi$ and the
resulting electric field, $E$.

\[\frac{\rho}{\epsilon} = \frac{dE}{dx}\]

\noindent Also,
\[E = -\frac{d\phi}{dx}\]

\section*{Discretization}
The first step is to discretize the above equations. The space
dimension is discretized by dividing into $N$ uniform intervals
of $\Delta x$. 

\noindent In order to do that we use the central difference
representation of the deriviative where:
\[
\left.\frac{df}{dx}\right|_i = \frac{f(x_{i+1}) - f(x_{i-1})}{2\Delta x}
\]

\noindent Applying this representation to the relationship
between $\rho$ and $E$:
\[
\left.\frac{dE}{dx}\right|_i = \frac{\left.E\right|_{i+\frac{1}{2}} - \left.E\right|_{i-\frac{1}{2}}}{\Delta x}
\]

\noindent Now, substituting the relationship between $E$ and
$\phi$ in the above:
\[
\phi_{i+1} - 2\phi_i + \phi_{i-1} = -\frac{\rho_i}{\epsilon}\times\Delta x\times\Delta x
\]

\noindent Remember that we are using the central difference
representation of the derivative for $\frac{d\phi}{dx}$

\noindent This is the discretized Poisson's equations at $i$.
This gives us $N-1$ equations. We need two more equations. These
are given by the boundary points.

<<prototype>>=
/*
 * Function prototype of LAPACK A=bx solver
 */
void dgesv_ (
     int*    N          // num of equations           
   , int*    NRHS       // num of cols on RHS         
   , double* A          // the A matrix (LDAxN)       
   , int*    LDA        // leading dim of A           
   , int*    IPIV       // o/p indicating permutations
   , double* B          // the RHS on i/p, soln on o/p
   , int*    LDB        // leading dim of A           
   , int*    INFO);     // information about the op   

<<initializations>>

@
The definitions of $N$ determines the number of points (uniformly
spaced) in the distribution (here one-dimension).

This, in turn, determines the size of the matrix A, and the size
of the $\phi$ and $\rho$ vectors.

<<initializations>>=
void main (void) {
   int      N        = 101;
   double   A    [N][N];
   double   xc   [N];   // The dimension along which rho is available
   double   rho  [N];
   double   b    [N];
   double   deltaX   = 1.0/(double)(N-1);
   double   rho0     = 10.0;
   
   <<constants>>

@
The following constants are from the problem at hand and describe
the shape of the distribution

<<constants>>=
   double epsilon    = 1.0;
   double   l1       = 0.25;
   double   l2       = 0.50;
   double   l3       = 0.75;

   <<dgesvOthers>>

@
As we are using dgesv, we need to define all the arguments
expected by the function\ldots

<<dgesvOthers>>=
   // Other dgesv related declarations
   // IPIV array (for dgesv, we don't really use it here)
   int* ipiv = (int *) malloc (N*sizeof (int));

   // INFO from dgesv
   int dgesvInfo;

   // NRHS for dgesv
   int nrhs = 1;

   // LDA, LDB
   int lda = N;
   int ldb = N;

   // Iterators
   int      i,j   = 0;

   // File handler to dump the phi values
   FILE* f_phi;

   <<xRhoVals>>

@
Let's populate the values for the discretized x-coordinate. Using
this array of x-coordinates, we can, given the charge
distribution in the problem statement, create the corresponding
discretized $\rho$ vector.

<<xRhoVals>>=
   xc[0] = 0.0;
   for (i=1; i<N; i++) {
      // The x-coordinates
      xc[i] = xc[i-1]+deltaX;
   }

   // Fill out the rho values according to the given charge
   // distribution
   for (i=0; i<N; i++) {
      // The rho values
      if (xc[i] < l1) {
         rho[i] = 0.0;
      } else if (xc[i] < l2) {
         rho[i] = -rho0;
      } else if (xc[i] < l3) {
         rho[i] = rho0;
      }
   }

   <<poissonRHS>>

@
Using the $\rho$ vector, compute the RHS of the Poisson equation,
which will in turn, be the $B$ vector for the dgesv solver. Note
that we are filling the $B$ vector from index one and not zero.
Index zero is left for the first boundary condition which is
always to do with the $\phi_0$ value. The second boundary
condition is at index $n-1$. The choice of indices for the
boundary condition is arbitrary.

<<poissonRHS>>=

   // The RHS of the Poisson's equation
   for (i=1; i<N-1; i++) {
      // The RHS or phi matrix
      b[i] = (-rho[i] * deltaX * deltaX)/epsilon;
   }

   // Given boundary conditions
   b[0] = 0.0;    // phi(0) = 0
   b[N-1] = 0.0;  // dphi(0) = 0 => phi(1) - phi(0) = 0
                  // Placed at the end arbitrarily

   <<aMatrix>>

@
The $A$ matrix contiains coefficients according to the poisson equation:
\[
A =
\begin{bmatrix}
1& 0& 0& 0&...&0& 0& 0 \\
1&-2& 1& 0&...&0& 0& 0 \\
0& 1&-2& 1&...&0& 0& 0 \\
... \\
... \\
0 &0& 0& 0&...&1&-2& 1 \\
-1&1& 0& 0&...&0& 0& 0 \\
\end{bmatrix}
\]

Rows, 0 and $n-1$ contain coefficients for the boundary
conditions. Also note that the $A$ matrix is populated in
column-major for the dgesv routine.

<<aMatrix>>=
   // Create the coefficient (A) matrix
   // First fill with zeros
   for (i=0; i<N; i++) {
      for (j=0; j<N; j++) {
         A[i][j] = 0.0;
      }
   }

   // The poisson's equation for points 1 to N-1
   for (i=0; i<N-1; i++) {
      A[i][i] = -2.0;
      A[i-1][i] = 1.0;
      A[i+1][i] = 1.0;
   }

   // Given boundary conditions
   A[0][0] = 1.0;    // phi(0) = 0
   A[0][N-1] = -1.0; // dphi(0) = 0 => phi(1) - phi(0) = 0
   A[1][N-1] = 1.0;  // dphi(0) = 0 => phi(1) - phi(0) = 0

   dgesv_ (
        &N
      , &nrhs
      , &A[0][0]
      , &lda
      , ipiv
      , b
      , &ldb
      , &dgesvInfo
   );

   <<wrapUp>>

@
The results are in $b$, and these are dumped into a file.

<<wrapUp>>=
   // Dump results to a file
   f_phi = fopen ("phi.dat", "w");

   for (i=0; i<N; i++) {
      fprintf (f_phi, "%11.4e %11.4e\n", xc[i], b[i]);
   }

   fclose (f_phi);
}

@
\end{document}
